# Configuration for DIY MMU2S based on SKR-MINI
# Jeremy Briffaut kakou@kakou.org
# More info : https://www.thingiverse.com/thing:3910546
#
#
# config inspired from https://github.com/mwr666/klipper/blob/sunbeam2.0c_multi_mcu_mmu2/config/printer-protodev-corexy-multi-mcu-mmu2.cfg

[include printer-mmu2s-board.cfg]
[include printer-mmu2s-config.cfg]

###############################
###############################

[gcode_macro ACTIVATE_EXTRUDER]
rename_existing: BASE_ACTIVATE_EXTRUDER
variable_extruder: "extruder"
gcode:
	MMU_RESPOND MSG="Set extruder : {extruder}"

###############################
###############################
[gcode_macro MMU_ENABLE_DEBUG]
gcode:
	{% set ON = params.ON|default(1)|int %}
	{% if ON == 0 %}
		RESPOND MSG="Disable MMU DEBUG"
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=enable_debug VALUE=False
	{% else %}
		RESPOND MSG="Enable MMU DEBUG"
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=enable_debug VALUE=True
	{% endif %}

[gcode_macro MMU_RESPOND]
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_debug|int == 1 %}
		RESPOND MSG="{params.MSG}"
	{% endif %}

###############################
[gcode_macro DISPLAY_MMU_ERROR]
gcode:
	RESPOND MSG="Error status : "
	RESPOND MSG="Error cut		: {printer["gcode_macro _MMU_ERROR_CUT"].error_cut}"
	RESPOND MSG="Error purge	: {printer["gcode_macro _MMU_ERROR_PURGE"].error_purge}"
	RESPOND MSG="Error load		: {printer["gcode_macro _MMU_ERROR_LOAD"].error_load}"
	RESPOND MSG="Error unload	: {printer["gcode_macro _MMU_ERROR_UNLOAD"].error_unload}"
	RESPOND MSG="Retry load		: {printer["gcode_macro _MMU_ERROR_RETRY_LOAD"].error_retry_load}"
	RESPOND MSG="Retry unload	: {printer["gcode_macro _MMU_ERROR_RETRY_UNLOAD"].error_retry_unload}"
	RESPOND MSG="Intervention	: {printer["gcode_macro _MMU_ERROR_PAUSE"].error_retry_pause}"

[gcode_macro _RESET_MMU_ERROR]
gcode:
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_CUT VARIABLE=error_cut VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_PURGE VARIABLE=error_purge VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_LOAD VARIABLE=error_load VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_UNLOAD VARIABLE=error_unload VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_RETRY_LOAD VARIABLE=error_retry_load VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_RETRY_UNLOAD VARIABLE=error_retry_unload VALUE=0
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_PAUSE VARIABLE=error_retry_pause VALUE=0
	_MMU_WRITE_STAT MSG='RESET'	

[gcode_macro _MMU_ERROR_RETRY_LOAD]
variable_error_retry_load: 0
gcode:
	{% set error = error_retry_load + 1 %}
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_RETRY_LOAD VARIABLE=error_retry_load VALUE={error}
	_MMU_WRITE_STAT MSG="ERROR:RLOAD:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_RETRY_UNLOAD]
variable_error_retry_unload: 0
gcode:
	{% set error = error_retry_unload + 1 %}
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_RETRY_UNLOAD VARIABLE=error_retry_unload VALUE={error}
	_MMU_WRITE_STAT MSG="ERROR:RULOAD:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_CUT]
variable_error_cut: 0
gcode:
        {% set error = error_cut + 1 %}
        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_CUT VARIABLE=error_cut VALUE={error}
        _MMU_WRITE_STAT MSG="ERROR:CUT:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_PURGE]
variable_error_purge: 0
gcode:
        {% set error = error_purge + 1 %}
        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_PURGE VARIABLE=error_purge VALUE={error}
        _MMU_WRITE_STAT MSG="ERROR:PURGE:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_LOAD]
variable_error_load: 0
gcode:
        {% set error = error_load + 1 %}
        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_LOAD VARIABLE=error_load VALUE={error}
        _MMU_WRITE_STAT MSG="ERROR:LOAD:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_UNLOAD]
variable_error_unload: 0
gcode:
        {% set error = error_unload + 1 %}
        SET_GCODE_VARIABLE MACRO=_MMU_ERROR_UNLOAD VARIABLE=error_unload VALUE={error}
        _MMU_WRITE_STAT MSG="ERROR:ULOAD:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_PAUSE]
variable_error_retry_pause: 0
gcode:
	{% set error = error_retry_pause + 1 %}
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_PAUSE VARIABLE=error_retry_pause VALUE={error}
	_MMU_WRITE_STAT MSG="ERROR:PAUSE:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

[gcode_macro _MMU_ERROR_INCREMENT_RUNOUT]
variable_error_runout: 0
variable_is_runout: False
gcode:
	{% set error = error_runout + 1 %}
	SET_GCODE_VARIABLE MACRO=_MMU_ERROR_INCREMENT_RUNOUT VARIABLE=error_runout VALUE={error}
	_MMU_WRITE_STAT MSG="ERROR:RUNOUT:T{printer["gcode_macro SELECT_TOOL"].color_selected}"

#####
[gcode_shell_command mmu_write_stat]
command: bash /home/pi/printer_data/config/script_mmu_stat.sh
timeout: 2.
verbose: False

[gcode_macro _MMU_WRITE_STAT]
gcode:
	RUN_SHELL_COMMAND CMD=mmu_write_stat PARAMS="{params.MSG}"	

[gcode_shell_command mmu_generate_stat]
command: bash /home/pi/printer_data/config/compute_stat.sh
timeout: 120.
verbose: True

[gcode_macro _MMU_GENERATE_STAT]
gcode:
	RUN_SHELL_COMMAND CMD=mmu_generate_stat PARAMS="/tmp/mmu_stat.log {printer.print_stats.filament_used}"	


###############################
#
# Purge MACROS
#
###############################

# Display current purge length
[gcode_macro PURGE_STATUS]
gcode:
	RESPOND MSG="Purge status (unload/load) :"
	RESPOND MSG="Filament 0	: {printer["gcode_macro _VAR_MMU2S"].t0_purge_unload_length}mm / {printer["gcode_macro _VAR_MMU2S"].t0_purge_load_length}mm"
	RESPOND MSG="Filament 1	: {printer["gcode_macro _VAR_MMU2S"].t1_purge_unload_length}mm / {printer["gcode_macro _VAR_MMU2S"].t1_purge_load_length}mm"
	RESPOND MSG="Filament 2	: {printer["gcode_macro _VAR_MMU2S"].t2_purge_unload_length}mm / {printer["gcode_macro _VAR_MMU2S"].t2_purge_load_length}mm"
	RESPOND MSG="Filament 3	: {printer["gcode_macro _VAR_MMU2S"].t3_purge_unload_length}mm / {printer["gcode_macro _VAR_MMU2S"].t3_purge_load_length}mm"
	RESPOND MSG="Filament 4	: {printer["gcode_macro _VAR_MMU2S"].t4_purge_unload_length}mm / {printer["gcode_macro _VAR_MMU2S"].t4_purge_load_length}mm"

[gcode_macro SET_PURGE_LENGTH]
gcode:
	{% set FILAMENT = params.FILAMENT|default(0)|int %}
	{% set UNLOAD = params.UNLOAD|default(0)|int %}
	{% set LOAD = params.LOAD|default(40)|int %}
	RESPOND MSG="Set filament {FILAMENT} purge length {UNLOAD}/{LOAD}"
	{%if FILAMENT|int == 0 %}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t0_purge_load_length VALUE={LOAD}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t0_purge_unload_length VALUE={UNLOAD}
	{% endif %}
	{%if FILAMENT|int == 1 %}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t1_purge_load_length VALUE={LOAD}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t1_purge_unload_length VALUE={UNLOAD}
	{% endif %}
	{%if FILAMENT|int == 2 %}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t2_purge_load_length VALUE={LOAD}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t2_purge_unload_length VALUE={UNLOAD}
	{% endif %}
	{%if FILAMENT|int == 3 %}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t3_purge_load_length VALUE={LOAD}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t3_purge_unload_length VALUE={UNLOAD}
	{% endif %}
	{%if FILAMENT|int == 4 %}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t4_purge_load_length VALUE={LOAD}
		SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=t4_purge_unload_length VALUE={UNLOAD}
	{% endif %}

[gcode_macro SET_PURGE_SPEED]
variable_speed: 374
gcode:
	RESPOND MSG="Set purge speed at {speed} mm/min"
	SET_GCODE_VARIABLE MACRO=_VAR_MMU2S VARIABLE=purge_speed VALUE={speed}

###############################
#
# MMU2S endstop status : IR extruder, PINDA, selector switch
# 0 : open, 1 : TRIGGERED
#
###############################

[gcode_macro _EXTRUDER_IN_STATUS]
variable_filament_loaded: False
gcode:
	SET_GCODE_VARIABLE MACRO=_EXTRUDER_IN_STATUS VARIABLE=filament_loaded VALUE=False
	{% if
		( printer["gcode_macro _VAR_MMU2S"].enable_sensor_any ) or
		(
			( not printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear or printer["filament_switch_sensor sensor_on_gear"].filament_detected ) and
			( not printer["gcode_macro _VAR_MMU2S"].enable_sensor_before_gear or printer["filament_switch_sensor sensor_before_gear"].filament_detected ) and
		 	( not printer["gcode_macro _VAR_MMU2S"].enable_sensor_after_gear or printer["filament_switch_sensor sensor_after_gear"].filament_detected )
		)
	%}
		#MMU_RESPOND MSG="Filament in"
		SET_GCODE_VARIABLE MACRO=_EXTRUDER_IN_STATUS VARIABLE=filament_loaded VALUE=True
	{% else %}
		#MMU_RESPOND MSG="Filament out"
		SET_GCODE_VARIABLE MACRO=_EXTRUDER_IN_STATUS VARIABLE=filament_loaded VALUE=False
	{% endif %}

[gcode_macro _EXTRUDER_STATUS]
gcode:
        {% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
                RESPOND MSG="- Extruder : {printer["filament_switch_sensor sensor_on_gear"].filament_detected}"
        {% endif %}
        {% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_before_gear %}
                RESPOND MSG="- Before Extruder : {printer["filament_switch_sensor sensor_before_gear"].filament_detected}"
        {% endif %}
        {% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_after_gear %}
                RESPOND MSG="- After Extruder : {printer["filament_switch_sensor sensor_after_gear"].filament_detected}"
        {% endif %}

# Display the last queried status
[gcode_macro _ENDSTOPS_STATUS]
gcode:
	RESPOND MSG="Enstop status :"
	_EXTRUDER_STATUS
	{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
		RESPOND MSG="- PINDA	: {printer.query_endstops.last_query["manual_stepper gear_stepper"]}"
	{% endif %}
	{% if printer["gcode_macro _VAR_MMU2S"].tmc2209_sensorless %}
		RESPOND MSG="- Selector : {printer.query_endstops.last_query["manual_stepper selector_stepper"]}"
	{% endif %}

# Query and display the status
[gcode_macro ENDSTOPS_INFOS]
gcode:
	QUERY_ENDSTOPS
	_ENDSTOPS_STATUS

###############################
#
# PAUSE MACROS
# PAUSE_MMU is called when an human intervention is needed
# use MMU_UNLOCK to park the idler and start the manual intervention
# and use RESUME when the invention is ended to resume the current print
#
###############################

[pause_resume]
#recover_velocity: 50.

# park the idler, stop the delayed stop of the heater
[gcode_macro MMU_UNLOCK]
gcode:
	RESPOND MSG="MMU_UNLOCK: Homing mmu idler"
	SET_GCODE_VARIABLE MACRO=PAUSE_MMU VARIABLE=is_paused VALUE=0
	UPDATE_DELAYED_GCODE ID=DISABLE_HEATER DURATION=0
	_HOME_IDLER
	M109 S{printer["gcode_macro PAUSE_MMU"].extruder_temp}

[delayed_gcode DISABLE_HEATER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int != 0 %}
		RESPOND MSG="Disable extruder heater"
		M104 S0
	{% endif %}

[gcode_macro _GO_TO_PARKING]
gcode:
	G90
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x} F3000
	G1 Y{printer["gcode_macro _VAR_MMU2S"].pause_y} F3000

[gcode_macro _GO_TO_PARKING_OUT]
gcode:
	G91
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x_out} F3000
	G1 Y{printer["gcode_macro _VAR_MMU2S"].pause_y_out} F3000
	G90

# Pause the MMU, park the extruder at the parking position
# Save the current state and start the delayed stop of the heated
# modify the timeout of the printer acorrdly to timeout_pause
[gcode_macro PAUSE_MMU]
variable_is_paused: 0
variable_extruder_temp: 0
gcode:
  {% if printer.pause_resume.is_paused %}
	RESPOND MSG="Print is already paused"
  {% else %}
	G90
	RESPOND MSG="START PAUSE MMU"
        RESPOND PREFIX=tgnotify MSG="Printer is paused, check MMU"
	SET_GCODE_VARIABLE MACRO=PAUSE_MMU VARIABLE=extruder_temp VALUE={printer.extruder.temperature}
	SET_GCODE_VARIABLE MACRO=PAUSE_MMU VARIABLE=is_paused VALUE=1
	SAVE_GCODE_STATE NAME=PAUSE_MMU_state
	SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro _VAR_MMU2S"].timeout_pause}
	UPDATE_DELAYED_GCODE ID=DISABLE_HEATER DURATION={printer["gcode_macro _VAR_MMU2S"].disable_heater}
	_MMU_ERROR_PAUSE
	UNSELECT_TOOL
	_bip
	_bip
	_bip
	PAUSE_BASE
	G91
	G1 Z{printer["gcode_macro _VAR_MMU2S"].pause_z}
	G90
	_GO_TO_PARKING
	_bip
	_bip
	_bip
  {% endif %}


# call this macro to correctly RESUME with MMU check
[gcode_macro RESUME_MMU]
gcode:
	_MMU_WRITE_STAT MSG="ERROR:RESUME:T{printer["gcode_macro SELECT_TOOL"].color_selected}"
	_EXTRUDER_IN_STATUS
	_RESUME_MMU
	G92 E0
	G90

[gcode_macro _RESUME_MMU]
gcode:
        G90
	{% if not printer.pause_resume.is_paused %}
		RESPOND MSG="Print is not paused. Resume ignored"
	{% else %}
		{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
			{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
				RESPOND MSG="Resume print ..."
				G91
				G92 E0
				G1 E-{printer["gcode_macro _VAR_MMU2S"].purge_retract_at_end} F{printer["gcode_macro _VAR_MMU2S"].purge_speed}
				G92 E0
				G90
				RESTORE_GCODE_STATE NAME=PAUSE_MMU_state MOVE=1 MOVE_SPEED=100
				RESUME_BASE
				SET_SELECTED_COLOR VALUE={printer["gcode_macro TX"].next_color}
				_RESTORE_STATE_IF_SWAP_OK
			{% else %}
				RESPOND MSG="Filament not in extruder, could not resume"
				_ENDSTOPS_STATUS
			{% endif %}
		{% else %}
			RESPOND MSG="Unlock MMU before resuming !"
		{% endif %}
	{% endif %}

############################################
#
# T0, T1, ..., T4 : Change extruder MACRO
# if th new extruder is different from the current extruder :
#	eject the filament if needed
#	load the new one
#
############################################

[gcode_macro TX]
variable_prev_pa = 0
variable_old_color = -1
variable_next_color = -1
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_stealthburner_leds %}
		_STATUS_BUSY    
	{% endif %}
	{% set EXTRUDER = params.EXTRUDER|default(0)|int %}
	SET_DISPLAY_TEXT MSG="Change Tool T{EXTRUDER}"
	SET_GCODE_VARIABLE MACRO=TX VARIABLE=old_color VALUE={next_color}
	SET_GCODE_VARIABLE MACRO=TX VARIABLE=next_color VALUE={EXTRUDER}
	RESPOND MSG="T{EXTRUDER} ..."
	_MMU_WRITE_STAT MSG="TX:0:T{EXTRUDER}"
	{% if printer["gcode_macro SELECT_TOOL"].color_selected|int != EXTRUDER %}
		G91
		G1 Z{printer["gcode_macro _VAR_MMU2S"].lift_z_during_swap|float}
		G90
		SAVE_GCODE_STATE NAME=_MMU_TX
		SET_GCODE_VARIABLE MACRO=TX VARIABLE=prev_pa VALUE={printer.extruder.pressure_advance}
		SET_PRESSURE_ADVANCE ADVANCE=0 # temporaily disable PA
		{% if printer["gcode_macro _VAR_MMU2S"].enable_purge_servo %}
			_DEPLOY_PURGE
		{% endif %}
		_MMU_WRITE_STAT MSG="UT:0:T{printer["gcode_macro SELECT_TOOL"].color_selected}"
		_UT
		_MMU_WRITE_STAT MSG="UT:1:T{printer["gcode_macro SELECT_TOOL"].color_selected}"
		_MMU_WRITE_STAT MSG="LT:0:T{EXTRUDER}"
		_LT VALUE={EXTRUDER}
		_MMU_WRITE_STAT MSG="LT:1:T{EXTRUDER}"
		{% if printer["gcode_macro _VAR_MMU2S"].enable_purge_servo %}
			_EXTRUDER_IN_STATUS
			_TX_PURGE EXTRUDER={EXTRUDER}
		{% endif %}
		_RESTORE_STATE_IF_SWAP_OK
	{% else %}
		SET_DISPLAY_TEXT MSG="No change needed"
		RESPOND MSG="No change needed or last change not completed"
	{% endif %}
	_MMU_WRITE_STAT MSG="TX:1:T{EXTRUDER}"
	_EXTRUDER_IN_STATUS
	{% if printer["gcode_macro _VAR_MMU2S"].enable_stealthburner_leds %}
		_STATUS_PRINTING    
	{% endif %}
	_TX_END EXTRUDER={EXTRUDER}

[gcode_macro _RESTORE_STATE_IF_SWAP_OK]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro _VAR_MMU2S"].enable_purge_servo %}
			_RETRACT_PURGE
		{% endif %}
		MMU_RESPOND MSG="Restore state after swap"
		SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro TX"].prev_pa} # restore PA
        	RESTORE_GCODE_STATE NAME=_MMU_TX MOVE=1 MOVE_SPEED=250
                G91
                G1 Z-{printer["gcode_macro _VAR_MMU2S"].lift_z_during_swap|float}
                G90
		G92 E0
	{% else %}
		MMU_RESPOND MSG="Could not restore state, swap failed ...."
	{% endif %}

[gcode_macro _TX_PURGE]
gcode:
	{% set EXTRUDER = params.EXTRUDER|default(0)|int %}
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
			_MMU_WRITE_STAT MSG="PU:0:T{EXTRUDER}"
			_PURGE_FILAMENT
			_MMU_WRITE_STAT MSG="PU:1:T{EXTRUDER}"
			_CHECK_PURGE
		{% else %}
			RESPOND MSG="Filament not loaded, could not PURGE :("
			_MMU_ERROR_PURGE
			PAUSE_MMU
		{% endif %}
	 {% endif %}

[gcode_macro _CHECK_PURGE]
gcode:
	{% if printer["gcode_macro _MMU_ERROR_INCREMENT_RUNOUT"].is_runout %}
		RESPOND MSG="Runout detected :("
		SET_GCODE_VARIABLE MACRO=_MMU_ERROR_INCREMENT_RUNOUT VARIABLE=is_runout VALUE=False
		_MMU_ERROR_PURGE
		PAUSE_MMU
	{% else %}
		MMU_RESPOND MSG="Purge done :)"
	{% endif %}

[gcode_macro _TX_END]
gcode:
	{% set EXTRUDER = params.EXTRUDER|default(0)|int %}
	{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		SET_DISPLAY_TEXT MSG="T{printer["gcode_macro TX"].old_color}->T{EXTRUDER} Loaded :)"
		RESPOND MSG="T{printer["gcode_macro TX"].old_color}->T{EXTRUDER} Loaded :)"
	{% else %}
		SET_DISPLAY_TEXT MSG="T{printer["gcode_macro TX"].old_color}->T{EXTRUDER} FAILED :("
		RESPOND MSG="T{printer["gcode_macro TX"].old_color}->T{EXTRUDER} FAILED :("
	{% endif %}

[gcode_macro T0]
gcode:
	TX EXTRUDER=0

[gcode_macro T1]
gcode:
	TX EXTRUDER=1

[gcode_macro T2]
gcode:
	TX EXTRUDER=2

[gcode_macro T3]
gcode:
	TX EXTRUDER=3

[gcode_macro T4]
gcode:
	TX EXTRUDER=4

############################################
#
# Unloading/Loading Macros
#
############################################

# Load filament from MMU2S to nozzle
[gcode_macro _LT]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == -1 %}
			MMU_RESPOND MSG="_LT {params.VALUE|int} ..."
			SELECT_TOOL VALUE={params.VALUE|int}
			_LOAD_FILAMENT_TO_EXTRUDER
			_LOAD_FILAMENT_IN_EXTRUDER
			UNSELECT_TOOL
			_EXTRUDER_IN_STATUS
			_LT_END
		{% else %}
			MMU_RESPOND MSG="_LT {params.VALUE|int} cannot, already loaded"
		{% endif %}
	{% endif %}

[gcode_macro _LT_END]
gcode:
	{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		MMU_RESPOND MSG="Filament loading complete ... purging now"	
	{% else %}
		MMU_RESPOND MSG="Loading fail, check MMU :("
	{% endif %}

# Unload filament from nozzle to MMU2S
[gcode_macro _UT]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int != -1 %}
			MMU_RESPOND MSG="_UT {printer["gcode_macro SELECT_TOOL"].color_selected|int} ..."
			SELECT_TOOL VALUE={printer["gcode_macro SELECT_TOOL"].color_selected|int}
			_UNLOAD_FILAMENT_IN_EXTRUDER
			_UNLOAD_FILAMENT_FROM_EXTRUDER
			UNSELECT_TOOL
			_EXTRUDER_IN_STATUS
			_UT_END
		{% else %}
			MMU_RESPOND MSG="_UT cannot unload, already unloaded"
		{% endif %}
	{% endif %}

[gcode_macro _UT_END]
gcode:
	{% if not printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
                MMU_RESPOND MSG="Filament unloading complete :)"
        {% else %}
                MMU_RESPOND MSG="Unloading fail, check MMU :("
        {% endif %}

############################################
#
# HELP TO INSERT FILAMENT IN MMU
# LOADING FILAMENT MMU
#
############################################

# Load filament IN MMU
[gcode_macro INSERT_FILAMENT_INTO_MMU]
gcode:
	{% if printer["gcode_macro HOME_MMU"].home != -1 %}
		MMU_RESPOND MSG="Loading {params.VALUE|default(0)|int} ..."
		SELECT_TOOL VALUE={params.VALUE|default(0)|int}
		G91
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].insert_into_mmu_length} SPEED=50
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
		UNSELECT_TOOL
		MMU_RESPOND MSG="Loading done for {params.VALUE|default(0)|int} in MMU"
	{% else %}
		MMU_RESPOND MSG="MMU not homed"
	{% endif %}

############################################
#
# Select/Unselect a tool
# move the idler and the color selector (if needed) to the requested tool (0-4)
#
############################################

# Select a tool. move the idler and then move the color selector (if needed)
[gcode_macro SELECT_TOOL]
variable_tool_selected: -1
variable_color_selected: -1
gcode:
	{% if printer["gcode_macro HOME_MMU"].home != -1 %}
		MMU_RESPOND MSG="Select Tool {params.VALUE} ..."
		_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].idler[params.VALUE|int]}
		{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
			_MMU_MANUAL_STEPPER STEPPER=selector_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].colorselector[params.VALUE|int]}
		{% endif %}
		SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=tool_selected VALUE={params.VALUE}
		SET_SELECTED_COLOR VALUE={params.VALUE}
		MMU_RESPOND MSG="Tool {params.VALUE} Enabled"
	{% else %}
	RESPOND MSG="Could not select tool, MMU is not homed"
	{% endif %}

[gcode_macro SET_SELECTED_COLOR]
gcode:
	SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE={params.VALUE}

# Unselect a tool, only park the idler
[gcode_macro UNSELECT_TOOL]
gcode:
	{% if printer["gcode_macro HOME_MMU"].home != -1 %}
		_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].idler_home_position}
		SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=tool_selected VALUE=-1
	{% else %}
		MMU_RESPOND MSG="Could not unselect tool, MMU is not homed"
	{% endif %}

############################################
#
# Purge macros
#
#
############################################
[gcode_macro _DEPLOY_PURGE]
variable_z_lifted: -1
variable_x_move: 40
variable_y_move: 0
variable_z_lift: 0
gcode:
	G90
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x + printer["gcode_macro _DEPLOY_PURGE"].x_move} Y{printer["gcode_macro _VAR_MMU2S"].pause_y + printer["gcode_macro _DEPLOY_PURGE"].y_move} F9000
	{% if printer.toolhead.position.z|int < printer["gcode_macro _DEPLOY_PURGE"].z_lift  %}
		SET_GCODE_VARIABLE  MACRO=_DEPLOY_PURGE VARIABLE=z_lifted VALUE=1
		G91
		G1 Z+{printer["gcode_macro _DEPLOY_PURGE"].z_lift} F1200
		G90
	{% endif %}
	G4 P1000
	SET_SERVO SERVO=purge_servo angle={printer["gcode_macro _VAR_MMU2S"].servo_angle_deploy}
	G90
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x} Y{printer["gcode_macro _VAR_MMU2S"].pause_y} F9000

[gcode_macro _PARK_PURGE]
gcode:
	SET_SERVO SERVO=purge_servo angle=0

[gcode_macro _RETRACT_PURGE]
gcode:
	G90
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x + printer["gcode_macro _DEPLOY_PURGE"].x_move} Y{printer["gcode_macro _VAR_MMU2S"].pause_y + printer["gcode_macro _DEPLOY_PURGE"].y_move} F9000
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x} Y{printer["gcode_macro _VAR_MMU2S"].pause_y} F9000
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x + printer["gcode_macro _DEPLOY_PURGE"].x_move} Y{printer["gcode_macro _VAR_MMU2S"].pause_y + printer["gcode_macro _DEPLOY_PURGE"].y_move} F9000
	SET_SERVO SERVO=purge_servo angle=0
	SET_SERVO SERVO=purge_servo angle=170
	SET_SERVO SERVO=purge_servo angle=0
	{% if printer["gcode_macro _DEPLOY_PURGE"].z_lifted|int == 1 %}
		G91
		G1 Z-{printer["gcode_macro _DEPLOY_PURGE"].z_lift} F1200
		G90
	{% endif %}
	SET_GCODE_VARIABLE  MACRO=_DEPLOY_PURGE VARIABLE=z_lifted VALUE=-1

[gcode_macro _MOVE_PURGE_FILAMENT]
variable_purge_max: 60
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_purge_servo %}
		{% set purge_length = params.PURGE_LENTGH|default(60)|int %}
		MMU_RESPOND MSG="Purging : {purge_length|int} mm"
		_MMU_WRITE_STAT MSG="PU:{purge_length}:T{printer["gcode_macro SELECT_TOOL"].color_selected}"
		G91
		G92 E0
		{% for i in range(purge_length|int//purge_max|int) %}
			G1 E{purge_max} F{printer["gcode_macro _VAR_MMU2S"].purge_speed}
			G92 E0
		{% endfor %}
		G1 E{purge_length|int%purge_max|int} F{printer["gcode_macro _VAR_MMU2S"].purge_speed}
		G92 E0
		G90
	{% else %}
		MMU_RESPOND MSG="Could not purge with servo, not enabled ..."
	{% endif %}

[gcode_macro _PURGE_FILAMENT]
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_stealthburner_leds %}
		_STATUS_CLEANING
	{% endif %}
	{% if printer["gcode_macro _VAR_MMU2S"].purge_after_load %}
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
	{% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
		MMU_RESPOND MSG="Purging Filament {printer["gcode_macro TX"].old_color}->{printer["gcode_macro SELECT_TOOL"].color_selected}..."
		{% set purge_length = 0 %}
		G91
		G92 E0
		G1 E2.0000 F1140
		G1 E7.0000 F1680
		G1 E1.0000 F168
		{% if printer["gcode_macro TX"].old_color|int == 0 %}
			{% set purge_length = printer["gcode_macro _VAR_MMU2S"].t0_purge_unload_length %}
		{% endif %}
		{% if printer["gcode_macro TX"].old_color|int == 1 %}
			{% set purge_length = printer["gcode_macro _VAR_MMU2S"].t1_purge_unload_length %}
		{% endif %}
		{% if printer["gcode_macro TX"].old_color|int == 2 %}
			{% set purge_length = printer["gcode_macro _VAR_MMU2S"].t2_purge_unload_length %}
		{% endif %}
		{% if printer["gcode_macro TX"].old_color|int == 3 %}
			{% set purge_length = printer["gcode_macro _VAR_MMU2S"].t3_purge_unload_length %}
		{% endif %}
		{% if printer["gcode_macro TX"].old_color|int == 4 %}
			{% set purge_length = printer["gcode_macro _VAR_MMU2S"].t4_purge_unload_length %}
		{% endif %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == 0 %}
			{% set purge_length = purge_length + printer["gcode_macro _VAR_MMU2S"].t0_purge_load_length %}
		{% endif %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == 1 %}
			{% set purge_length = purge_length + printer["gcode_macro _VAR_MMU2S"].t1_purge_load_length %}
		{% endif %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == 2 %}
			{% set purge_length = purge_length + printer["gcode_macro _VAR_MMU2S"].t2_purge_load_length %}
		{% endif %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == 3 %}
			{% set purge_length = purge_length + printer["gcode_macro _VAR_MMU2S"].t3_purge_load_length %}
		{% endif %}
		{% if printer["gcode_macro SELECT_TOOL"].color_selected|int == 4 %}
			{% set purge_length = purge_length + printer["gcode_macro _VAR_MMU2S"].t4_purge_load_length %}
		{% endif %}
		G92 E0
		{% if printer["gcode_macro _VAR_MMU2S"].enable_motion_sensor %}
			FMS_ENABLE EXTRUDER={printer["gcode_macro SELECT_TOOL"].color_selected|int}
		{% endif %}
		{% if printer["gcode_macro _VAR_MMU2S"].enable_purge_servo %}
				_MOVE_PURGE_FILAMENT PURGE_LENTGH={purge_length}
		{% else %}
				G1 E{purge_length} F{printer["gcode_macro _VAR_MMU2S"].purge_speed}
		{% endif %}
		{% if printer["gcode_macro _VAR_MMU2S"].enable_motion_sensor %}
			FMS_DISABLE EXTRUDER={printer["gcode_macro SELECT_TOOL"].color_selected|int}
		{% endif %}
		M400
		G92 E0
		G1 E-{printer["gcode_macro _VAR_MMU2S"].purge_retract_at_end} F{printer["gcode_macro _VAR_MMU2S"].purge_speed}
		G92 E0
		G90
	{% endif %}
	{% endif %}
	{% endif %}


############################################
#
# Loading/Unloading part FROM/TO EXTRUDER TO/FROM NOZZLE
# During loading, if the IR sensor does not detect the filament, it tries 3 times to reinsert it
#
############################################

#### sensor on extruder IR check
# VERIFY if filament is correctly loaded
[gcode_macro _CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
variable_filament_in: 0
variable_nb_test_in: 3
gcode:
	MMU_RESPOND MSG="_CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR"
	{% for i in range(nb_test_in|int) %}
		_EXTRUDER_IN_STATUS
		__CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
	{% endfor %}

[gcode_macro __MOVE_IN_EXTRUDER]
gcode:
	{% set length = params.LENGTH|default(0)|float %}
	{% set speed = params.SPEED|default(10)|int %}
	MMU_RESPOND MSG="__MOVE_IN_EXTRUDER {length} {speed}"
	G91
	G92 E0
	_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
	_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE={length} SPEED={speed} SET_POSITION=0 SYNC=0
	G1 E{length} F{speed * 60}
	_MMU_MANUAL_STEPPER STEPPER=gear_stepper SYNC=1
	_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
	G90
	G92 E0
	M400

[gcode_macro __CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
gcode:
	MMU_RESPOND MSG="Filament in ? {printer["gcode_macro _CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR"].filament_in|int}"
	{% if printer["gcode_macro _CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR"].filament_in|int == 0 %}
		{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
			MMU_RESPOND MSG="Filament is loaded move it to check"
			G91
			G92 E0
			{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
				__MOVE_IN_EXTRUDER LENGTH=-10 SPEED=10
				{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
					__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].load_in_extruder - 10} SPEED=10
				{% elif printer["gcode_macro _VAR_MMU2S"].enable_sensor_before_gear %}
					__MOVE_IN_EXTRUDER LENGTH=-10 SPEED=10
				{% endif %}
			{% endif %}
		{% endif %}
		_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
	{% endif %}

# Try to reinsert the filament into the extruder
# Called when the IR sensor does not detect the filament
# the MMU2S push the filament of 10mm
# and the extruder gear try to insert it into the nozzle
[gcode_macro _RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
gcode:
	MMU_RESPOND MSG="_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR"
	_EXTRUDER_IN_STATUS
	__RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR

[gcode_macro __RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
gcode:
	{% if not printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		MMU_RESPOND MSG="Retry loading ...."
		{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
			MMU_RESPOND MSG="Loading Filament..."
			_MMU_ERROR_RETRY_LOAD
			G90
			_GO_TO_PARKING
			__MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].load_in_extruder} SPEED=10
		{% endif %}
		{% endif %}
		M400
	{% else %}
		MMU_RESPOND MSG="Filament in extruder : OK"
		SET_GCODE_VARIABLE MACRO=_CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR VARIABLE=filament_in VALUE=1
		{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
			__MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].load_in_extruder} SPEED=10
		{% elif printer["gcode_macro _VAR_MMU2S"].enable_sensor_before_gear %}
                        __MOVE_IN_EXTRUDER LENGTH=10 SPEED=10
                {% endif %}
	{% endif %}

######
# Load the filament into the extruder
# the MMU2S push the filament of 20mm
# and the extruder gear try to insert it into the nozzle
# if the filament is not detected by the IR, call _RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR 3 times
#
# Call PAUSE_MMU if the filament is not detected by the IR sensor
[gcode_macro _LOAD_FILAMENT_IN_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 and
	   printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
		MMU_RESPOND MSG="Loading Filament..."
		SET_GCODE_VARIABLE MACRO=_CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR VARIABLE=filament_in VALUE=0
		__MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].load_in_extruder} SPEED=10
		_EXTRUDER_IN_STATUS
		{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
			_CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
		{% elif printer["gcode_macro _VAR_MMU2S"].enable_sensor_before_gear %}
			_CHECK_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
		{% endif %}
		_EXTRUDER_IN_STATUS
		_IS_FILAMENT_IN_EXTRUDER
	{% else %}
		RESPOND MSG="Extruder too cold"
		_MMU_ERROR_LOAD
		PAUSE_MMU
	{% endif %}

####
# Retry unload, try correct misalignement of bondtech gear
[gcode_macro _RETRY_UNLOAD_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
variable_nb_test_in: 3
gcode:
	MMU_RESPOND MSG="_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR"
	{% for i in range(nb_test_in|int) %}
		_EXTRUDER_IN_STATUS
		__RETRY_UNLOAD_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
	{% endfor %}

[gcode_macro __RETRY_UNLOAD_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
gcode:
		{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear and printer["filament_switch_sensor sensor_on_gear"].filament_detected %}
		MMU_RESPOND MSG="Retry unloading extruder...."
		{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
			MMU_RESPOND MSG="Unloading Filament extruder ..."
			_MMU_ERROR_RETRY_UNLOAD
			__MOVE_IN_EXTRUDER LENGTH=10 SPEED=10
			__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder1} SPEED=10
			__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder2} SPEED=50
		{% endif %}
		{% endif %}
	{% endif %}

# Unload the filament from the nozzle (without RAMMING !!!)
# Retract the filament from the nozzle to the out of the extruder gear
#
# Call PAUSE_MMU if the IR sensor detects the filament after the ejection
[gcode_macro _UNLOAD_FILAMENT_IN_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 and
	      printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
		MMU_RESPOND MSG="Unloading Filament..."
		{% if printer["gcode_macro _VAR_MMU2S"].enable_filametrix_cut %}
			_FILAMETRIX_CUT_FILAMENT
		{% endif %}
		__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder1} SPEED=10
                __MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].unload_in_extruder2} SPEED=50
		{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
			_RETRY_UNLOAD_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
		{% endif %}
		_IS_FILAMENT_STUCK_IN_EXTRUDER
	{% else %}
		RESPOND MSG="Extruder too cold"
		_MMU_ERROR_UNLOAD
		PAUSE_MMU
	{% endif %}

[gcode_macro _FILAMETRIX_CUT_FILAMENT]
variable_nb_test_in: 3
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_filametrix_cut %}
		MMU_RESPOND MSG="_FILAMETRIX_CUT_FILAMENT"
		MMU_RESPOND MSG="Filametrix cut"
		__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].filametrix_unload_length1} SPEED=50
		{% for i in range(nb_test_in|int) %}
                	_EXTRUDER_IN_STATUS
	                __FILAMETRIX_CUT_FILAMENT
        	{% endfor %}
        	_EXTRUDER_IN_STATUS
		_IS_FILAMETRIX_CUT_FILAMENT
	{% else %}
		MMU_RESPOND MSG="Filametrix not enable"
	{% endif %}


[gcode_macro _IS_FILAMETRIX_CUT_FILAMENT]
gcode:
	{% if printer["filament_switch_sensor sensor_after_gear"].filament_detected %}
		RESPOND MSG="Filament not cut ... , maybe sensor error, test again"
		__MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].filametrix_unload_length2} SPEED=50
		__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].filametrix_unload_length2} SPEED=50
		_RETRY_IS_FILAMETRIX_CUT_FILAMENT
	{% else %}
		MMU_RESPOND MSG="Filament cut ok"
	{% endif %}

[gcode_macro _RETRY_IS_FILAMETRIX_CUT_FILAMENT]
gcode:
	{% if printer["filament_switch_sensor sensor_after_gear"].filament_detected %}
                RESPOND MSG="Filament not cut ... :("
                _MMU_ERROR_CUT
                _EXTRUDER_STATUS
                PAUSE_MMU
        {% else %}
                MMU_RESPOND MSG="Filament cut ok"
        {% endif %}

[gcode_macro __FILAMETRIX_CUT_FILAMENT]
gcode:
	SET_GCODE_VARIABLE MACRO=_DO_FILAMETRIX_CUT_FILAMENT VARIABLE=redo VALUE=False
	{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_after_gear %}
		{% if printer["filament_switch_sensor sensor_after_gear"].filament_detected %}
			_DO_FILAMETRIX_CUT_FILAMENT
			SET_GCODE_VARIABLE MACRO=_DO_FILAMETRIX_CUT_FILAMENT VARIABLE=redo VALUE=True
		{% endif %}
	{% endif %}

# Cut with filametrix cutter
[gcode_macro _DO_FILAMETRIX_CUT_FILAMENT]
variable_redo: False
gcode:
		{% if printer["gcode_macro _DO_FILAMETRIX_CUT_FILAMENT"].redo %}
			__MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].filametrix_unload_length2 + 10} SPEED=50
		{% endif %} 
		SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _VAR_MMU2S"].filametrix_x_current|float}
		{% for i in range(printer["gcode_macro _VAR_MMU2S"].filametrix_nb_cut) %}
			G1 X{printer["gcode_macro _VAR_MMU2S"].filametrix_pos_start} F2000
			G1 X{printer["gcode_macro _VAR_MMU2S"].filametrix_pos_cut} F4000
			G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x} F2000
		{% endfor %}
		SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.config["tmc2209 stepper_x"]["run_current"]}
		__MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].filametrix_unload_length2} SPEED=50

# Ramming process for standart PLA, code extracted from slic3r gcode
[gcode_macro _RAMMING_SLICER]
gcode:
	G91
	G92 E0
	G1 E0.6873 F165
	G1 E0.7007 F168
	G1 E0.7376 F177
	G1 E0.7879 F189
	G1 E0.8214 F197
	G1 E0.8483 F204
	G1 E0.8952 F215
	G1 E0.9656 F232
	G1 E1.0360 F249
	G1 E1.0595 F254
	G1 E0.9958 F239
	G1 E0.8717 F209
	G1 E0.7846 F188
	G1 E0.7745 F186
	G1 E0.7879 F189
	G1 E0.7913 F190
	G1 E-15.000 F7200.0
	G1 E-24.5000 F1200.0
	G1 E-7.0000 F600.0
	G1 E-3.5000 F360.0
	G1 E20.000 F120.0
	G1 E-20.000 F60.0
	G1 E-50.0000 F2000
	G92 E0

# Unload from extruder with ramming
[gcode_macro _UNLOAD_FILAMENT_IN_EXTRUDER_WITH_RAMMING]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer.extruder.temperature > printer["gcode_macro _VAR_MMU2S"].min_temp_extruder %}
			{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int == -1 %}
				MMU_RESPOND MSG="Ramming and Unloading Filament..."
				G91
				_RAMMING_SLICER
				_UNLOAD_FILAMENT_IN_EXTRUDER
				MMU_RESPOND MSG="Filament rammed and removed"
			{% else %}
				RESPOND MSG="Tool selected, UNSELECT it"
				_MMU_ERROR_UNLOAD
				PAUSE_MMU
			{% endif %}
		{% else %}
			RESPOND MSG="Extruder too cold"
			_MMU_ERROR_UNLOAD
			PAUSE_MMU
		{% endif %}
	{% endif %}

############################################
#
# Loading/Unloading MACROS from MMU2S to the enter of the extruder gear
#
############################################

# Load filament until the PINDA detect it and push it 10mm more to be sure is well detected
#
# PAUSE_MMU is called if the PINDA does not detect the filament
[gcode_macro _LOAD_FILAMENT_TO_PINDA]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Loading filament to PINDA ..."
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].pinda_load_length} STOP_ON_ENDSTOP=2
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=10
			_IS_FILAMENT_IN_PINDA
			MMU_RESPOND MSG="Loading done to PINDA"
		{% else %}
			RESPOND MSG="Cannot load to PINDA, tool not selected !!"
		{% endif %}
	{% endif %}

# Load from the PINDA to the extruder gear
[gcode_macro _LOAD_FILAMENT_FROM_PARKPOS_TO_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Loading filament from PARKPOS to extruder ..."
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].bowden_load_length1} SPEED=120
			 __MOVE_IN_EXTRUDER LENGTH={printer["gcode_macro _VAR_MMU2S"].bowden_load_length2} SPEED=20
			MMU_RESPOND MSG="Loading done from PARKPOS to extruder"
		{% else %}
			RESPOND MSG="Cannot load to extruder, tool not selected !!"
		{% endif %}
	{% endif %}

# Load from MMU2S to extruder gear by calling _LOAD_FILAMENT_TO_PINDA and next _LOAD_FILAMENT_FROM_PARKPOS_TO_EXTRUDER
#
# PAUSE_MMU is called if the PINDA does not detect the filament
[gcode_macro _LOAD_FILAMENT_TO_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Loading filament from MMU to extruder ..."
			{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
				_LOAD_FILAMENT_TO_PINDA
			{% endif %}
			_LOAD_FILAMENT_FROM_PARKPOS_TO_EXTRUDER
			MMU_RESPOND MSG="Loading done from MMU to extruder"
		{% else %}
			RESPOND MSG="Cannot load to extruder, tool not selected !!"
		{% endif %}
	{% endif %}

# Unload filament until the PINDA detect it and push it -10mm more to be sure is well not detected
#
# PAUSE_MMU is called if the PINDA does detect the filament
[gcode_macro _UNLOAD_FILAMENT_FROM_PINDA]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Unloading filament from PINDA ..."
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro _VAR_MMU2S"].pinda_unload_length}
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-10
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			_IS_FILAMENT_STUCK_IN_PINDA
			SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE=-1
			MMU_RESPOND MSG="Unloading done from PINDA"
		{% else %}
			RESPOND MSG="Cannot unload from PINDA, tool not selected !!"
		{% endif %}
	{% endif %}

# Unload from extruder gear to the PINDA
[gcode_macro _UNLOAD_FILAMENT_FROM_EXTRUDER_TO_PARKPOS]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Unloading filament from extruder to PARKPOS ..."
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
				_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro _VAR_MMU2S"].bowden_unload_length} SPEED=120 STOP_ON_ENDSTOP=-2
				_IS_FILAMENT_STUCK_IN_PINDA
			{% else %}
				 __MOVE_IN_EXTRUDER LENGTH=-{printer["gcode_macro _VAR_MMU2S"].bowden_unload_length} SPEED=20
			{% endif %}
			MMU_RESPOND MSG="Unloading done from extruder to PARKPOS"
		{% else %}
			RESPOND MSG="Cannot unload from extruder to PARKPOS, tool not selected !!"
		{% endif %}
	{% endif %}

# Unload from the extruder gear to the MMU2S by calling _UNLOAD_FILAMENT_FROM_EXTRUDER_TO_PARKPOS and next _UNLOAD_FILAMENT_FROM_PINDA
[gcode_macro _UNLOAD_FILAMENT_FROM_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro SELECT_TOOL"].tool_selected|int != -1 %}
			MMU_RESPOND MSG="Unloading filament from extruder to MMU ..."
			_UNLOAD_FILAMENT_FROM_EXTRUDER_TO_PARKPOS
			{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
				_UNLOAD_FILAMENT_FROM_PINDA
			{% else %}
				SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE=-1
			{% endif %}
			MMU_RESPOND MSG="Unloading done from extruder to MMU"
		{% else %}
			RESPOND MSG="Cannot unload from extruder to MMU, tool not selected !!"
		{% endif %}
	{% endif %}

############################################
#
# Endstop check MACROS
# Verify the state of the PINDA or the IR sensor
#
############################################

####
## IR sensor on extruder multiple test
[gcode_macro _VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
variable_is_loaded: 0
gcode:
	QUERY_ENDSTOPS
	_EXTRUDER_IN_STATUS
	{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear and printer["filament_switch_sensor sensor_on_gear"].filament_detected %}
		SET_GCODE_VARIABLE MACRO=_VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR VARIABLE=is_loaded  VALUE={is_loaded|int + 1}
	{% endif %}
	G92 E0
	G1 E0.2 F200
	M400

[gcode_macro _LOOP_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
variable_nb_check: 8
gcode:
	SET_GCODE_VARIABLE MACRO=_VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR VARIABLE=is_loaded  VALUE=0
	{% for i in range(nb_check|int) %}
		_VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
	{% endfor %}

[gcode_macro _COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
variable_on_gear_loaded: False
variable_nb_check_valid: 5
gcode:
	{% if printer["gcode_macro _VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR"].is_loaded|int > nb_check_valid|int %}
		SET_GCODE_VARIABLE MACRO=_COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR  VARIABLE=on_gear_loaded  VALUE=True
	{% else %}
		SET_GCODE_VARIABLE MACRO=_COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR  VARIABLE=on_gear_loaded  VALUE=False
	{% endif %}

[gcode_macro _CHECK_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
gcode:  
	_LOOP_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
	_COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR

[gcode_macro _DEBUG_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR]
gcode:
	MMU_RESPOND MSG="Loaded : {printer["gcode_macro _COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR"].on_gear_loaded} ({printer["gcode_macro _VERIFY_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR"].is_loaded|int}/{printer["gcode_macro _COMPUTE_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR"].nb_check_valid|int})"

#####
# Call PAUSE_MMU if the filament is not detected by the IR sensor
[gcode_macro _IS_FILAMENT_IN_EXTRUDER]
gcode:
	MMU_RESPOND MSG="_IS_FILAMENT_IN_EXTRUDER"
	{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear %}
		_CHECK_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
		_DEBUG_FILAMENT_IN_EXTRUDER_SENSOR_ON_GEAR
	{% endif %}
	_EXTRUDER_IN_STATUS
	_IS_FILAMENT_IN_EXTRUDER2

# Call PAUSE_MMU if the filament is not detected by the IR sensor
[gcode_macro _IS_FILAMENT_IN_EXTRUDER2]
gcode:
	{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		MMU_RESPOND MSG="Filament in extruder"
	{% else %}
		RESPOND MSG="Filament not in extruder"
		_MMU_ERROR_LOAD
		PAUSE_MMU
	{% endif %}

# Call PAUSE_MMU if the filament is detected by the IR sensor
[gcode_macro _IS_FILAMENT_STUCK_IN_EXTRUDER]
gcode:
	_EXTRUDER_IN_STATUS
	_IS_FILAMENT_STUCK_IN_EXTRUDER2

[gcode_macro _IS_FILAMENT_STUCK_IN_EXTRUDER2]
gcode:
	{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_on_gear and printer["filament_switch_sensor sensor_on_gear"].filament_detected %}
		RESPOND MSG="Filament stuck in extruder"
		_MMU_ERROR_UNLOAD
		PAUSE_MMU
	{% else %}
		MMU_RESPOND MSG="Filament not in extruder"
	{% endif %}
        {% if not printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
                MMU_RESPOND MSG="Filament not in extruder"
        {% else %}
                RESPOND MSG="Filament stuck in extruder"
		_MMU_ERROR_UNLOAD
                PAUSE_MMU
        {% endif %}

####
# Call PAUSE_MMU if the filament is not detected by the PINDA
[gcode_macro _IS_FILAMENT_IN_PINDA]
gcode:
	QUERY_ENDSTOPS
	_IS_IN_PINDA

[gcode_macro _IS_IN_PINDA]
gcode:
	{% if printer.query_endstops.last_query["manual_stepper gear_stepper"] == 1 %}
		MMU_RESPOND MSG="Filament in PINDA"
	{% else %}
		RESPOND MSG="Filament not in PINDA"
		_MMU_ERROR_LOAD
		PAUSE_MMU
	{% endif %}

# Call PAUSE_MMU if the filament is detected by the PINDA
[gcode_macro _IS_FILAMENT_STUCK_IN_PINDA]
gcode:
	QUERY_ENDSTOPS
	_IS_STUCK_IN_PINDA

[gcode_macro _IS_STUCK_IN_PINDA]
gcode:
	{% if printer.query_endstops.last_query["manual_stepper gear_stepper"] == 1 %}
		RESPOND MSG="Filament stuck in PINDA"
		_MMU_ERROR_UNLOAD
		PAUSE_MMU
	{% else %}
		MMU_RESPOND MSG="Filament not in PINDA"
	{% endif %}

############################################
#
# M702 macro called by the end-gcode to eject the filament at the end of the print
#
############################################

# Eject the filament with ramming from the extruder nozzle to the MMU2S
[gcode_macro _EJECT_RAMMING]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
	{% if printer["gcode_macro SELECT_TOOL"].color_selected|int != -1 %}
		MMU_RESPOND MSG="_UT {printer["gcode_macro SELECT_TOOL"].color_selected|int} ..."
		_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_RAMMING
		SELECT_TOOL VALUE={printer["gcode_macro SELECT_TOOL"].color_selected|int}
		_UNLOAD_FILAMENT_FROM_EXTRUDER
	{% endif %}
	{% endif %}

# M702 first part
# unload filament if inserted into the IR sensor
[gcode_macro M702]
gcode:
	G91
	G1 Z{printer["gcode_macro _VAR_MMU2S"].pause_z}
	G90
	G1 Y{printer["gcode_macro _VAR_MMU2S"].pause_y_out} F3000
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x_out} F3000
	G1 X{printer["gcode_macro _VAR_MMU2S"].pause_x} Y{printer["gcode_macro _VAR_MMU2S"].pause_y} F3000
	_UT
	QUERY_ENDSTOPS
	_END_M702

# M702 second part
# Unselect the current tool
[gcode_macro _END_M702]
gcode:
	{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
		{% if printer.query_endstops.last_query["manual_stepper gear_stepper"] != 1 %}
			UNSELECT_TOOL
			MMU_RESPOND MSG="M702 ok ..."
		{% else %}
			MMU_RESPOND MSG="M702 Error !!!"
		{% endif %}
	{% else %}
		UNSELECT_TOOL
		SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE=-1
		MMU_RESPOND MSG="M702 ok ..."
	{% endif %}

############################################
#
# MACROS called during homing to try to eject the filament if loaded
#
############################################

# Preheat the heater if needed and unload the filament with ramming
# eject from nozlle to extruder gear out
[gcode_macro _EJECT_FROM_EXTRUDER]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
			MMU_RESPOND MSG="Filament in extruder, trying to eject it .."
			MMU_RESPOND MSG="Preheat Nozzle"
			M109 S{printer["gcode_macro _VAR_MMU2S"].extruder_eject_temp}
			_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_RAMMING
			M104 S0
		{% else %}
			MMU_RESPOND MSG="Filament not in extruder"
		{% endif %}
	{% endif %}

# Eject from extruder gear to MMU2S
[gcode_macro _EJECT_BEFORE_HOME]
gcode:
	_EXTRUDER_IN_STATUS
	__EJECT_BEFORE_HOME

[gcode_macro __EJECT_BEFORE_HOME]
gcode:
	{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		MMU_RESPOND MSG="Eject Filament if loaded ..."
		_EXTRUDER_IN_STATUS
		_EJECT_FROM_EXTRUDER
		_IS_FILAMENT_STUCK_IN_EXTRUDER
		{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
			{% if printer.query_endstops.last_query["manual_stepper gear_stepper"] == 1 %}
				_UNLOAD_FILAMENT_FROM_EXTRUDER
				_IS_FILAMENT_STUCK_IN_PINDA
				MMU_RESPOND MSG="Filament ejected !"
			{% else %}
				MMU_RESPOND MSG="Filament already ejected !"
			{% endif %}
		{% else %}
			MMU_RESPOND MSG="Filament already ejected !"
		{% endif %}
	{% else %}
		{% if printer["gcode_macro _VAR_MMU2S"].enable_sensor_any %}
			MMU_RESPOND MSG="No filament sensor, could not check if Filament is ejected !"
		{% else %}
			MMU_RESPOND MSG="Filament already ejected !"
		{% endif %}
	{% endif %}

############################################
#
# Homing MACROS
# HOME_MMU must be called before using the MMU2S
#
############################################

# Home MMU if not homed
[gcode_macro HOME_MMU]
variable_home: -1
gcode:
	RESPOND MSG="Homing MMU ..."
	{% if printer["gcode_macro HOME_MMU"].home == -1 %}
		_FORCE_HOME_MMU
	{% else %}
		MMU_RESPOND MSG="MMU already homed !"
		MMU_UNLOCK
	{% endif %}
	RESPOND MSG="Homing MMU ended ..."

# Home the MMU
# eject filament if loaded with _EJECT_BEFORE_HOME
# next home the mmu with _HOME_MMU_ONLY
[gcode_macro _FORCE_HOME_MMU]
gcode:
	SET_GCODE_VARIABLE MACRO=HOME_MMU VARIABLE=home VALUE=1
	QUERY_ENDSTOPS
	_EJECT_BEFORE_HOME
	_HOME_MMU_ONLY

# Home the idler
[gcode_macro _HOME_IDLER]
gcode:
	RESPOND MSG="Homing idler"
	_MMU_MANUAL_STEPPER STEPPER=idler_stepper SET_POSITION=0
	_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE=7
	{% if not printer["gcode_macro _VAR_MMU2S"].tmc2209_sensorless %}
		_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE=-95
	{% else %}
		#NEEDED FOR SENSORLESS HOMING
		G4 P2000
		_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE=-95 STOP_ON_ENDSTOP=1
	{% endif %}
	_MMU_MANUAL_STEPPER STEPPER=idler_stepper SET_POSITION=2
	_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE={printer["gcode_macro _VAR_MMU2S"].idler_home_position}

# Home selector
[gcode_macro _HOME_SELECTOR]
gcode:
	RESPOND MSG="Homing selector"
	_MMU_MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	{% if not printer["gcode_macro _VAR_MMU2S"].tmc2209_sensorless %}
		_MMU_MANUAL_STEPPER STEPPER=selector_stepper MOVE=-76
	{% else %}
		G4 P1000
		_MMU_MANUAL_STEPPER STEPPER=selector_stepper MOVE=-76 STOP_ON_ENDSTOP=1
	{% endif %}
	_MMU_MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0

# Home the MMU :
# 1) home the idler
# 2) home the color selector (if needed)
# 3) try to load filament 0 to PINDA and then unload it. Used to verify the MMU2S gear
#
# if all is ok, the MMU2S is ready to be used
[gcode_macro _HOME_MMU_ONLY]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		_HOME_IDLER
		{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
			_HOME_SELECTOR
		{% endif %}
		_MMU_MANUAL_STEPPER STEPPER=idler_stepper MOVE=0
		SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=tool_selected VALUE=-1
		SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE=-1
		MMU_RESPOND MSG="Test idler filament 0"
		SELECT_TOOL VALUE=0
		{% if not printer["gcode_macro _VAR_MMU2S"].enable_5in1 %}
			MMU_RESPOND MSG="Test load filament 0"
			_LOAD_FILAMENT_TO_PINDA
			M400
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-10
			_UNLOAD_FILAMENT_FROM_PINDA
		{% else %}
			SET_GCODE_VARIABLE MACRO=SELECT_TOOL VARIABLE=color_selected VALUE=-1
		{% endif %}
		UNSELECT_TOOL
		SET_GCODE_VARIABLE MACRO=HOME_MMU VARIABLE=home VALUE=1
		M400
	{% else %}
		MMU_RESPOND MSG="Homing MMU failed, MMU is paused, unlock it ..."
	{% endif %}

###############################################
###############################################

###############################################
#
# TEST ROUTINES
#
###############################################
[gcode_macro MMU_TEST_LOAD]
gcode:
	HOME_MMU
	{% for i in range(10) %}
		MMU_RESPOND MSG="Test {i}"
		{% for j in range(5) %}
			SELECT_TOOL VALUE={j}
			_LOAD_FILAMENT_TO_EXTRUDER
			G4 P1000
			SELECT_TOOL VALUE={j}
			_UNLOAD_FILAMENT_FROM_EXTRUDER
		{% endfor %}
	{% endfor %}

[gcode_macro MMU_TEST_LOAD_EXTRUDER]
gcode:
	G28
	HOME_MMU
	G1 X100 Y-20 F2000
	{% for i in range(11) %}
		MMU_RESPOND MSG="Test {i}"
		{% for j in range(5) %}
			SELECT_TOOL VALUE={j}
			_LOAD_FILAMENT_TO_EXTRUDER
			_TEST_ONE_LOAD_UNLOAD
			SELECT_TOOL VALUE={j}
			_UNLOAD_FILAMENT_FROM_EXTRUDER
		{% endfor %}
	{% endfor %}

[gcode_macro _TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
gcode:
	_EXTRUDER_IN_STATUS
	__TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR

[gcode_macro __TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR]
gcode:
	{% if printer["gcode_macro _EXTRUDER_IN_STATUS"].filament_loaded %}
		MMU_RESPOND MSG="Retry loading ...."
		{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
			MMU_RESPOND MSG="Loading Filament..."
			_MMU_ERROR_RETRY_LOAD
			G91
			SELECT_TOOL VALUE={printer["gcode_macro SELECT_TOOL"].color_selected|int}
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=10 SPEED=10 SET_POSITION=0 SYNC=0
			G1 E10 F600
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SYNC=1
			_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			G1 E10 F600
			UNSELECT_TOOL
			G1 E10 F1800
			G92 E0
			G90
			G4 P1000
		{% endif %}
	{% endif %}

[gcode_macro _TEST_ONE_LOAD_UNLOAD]
gcode:
	{% if printer["gcode_macro PAUSE_MMU"].is_paused|int == 0 %}
		G91
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=20 SPEED=10 SET_POSITION=0 SYNC=0
		G1 E20 F600
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SYNC=1
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
		UNSELECT_TOOL
		G1 E22 F1393
		G92 E0
		G90
		G4 P1000
		_TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
		_TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
		_TEST_RETRY_LOAD_FILAMENT_IN_EXTRUDER_SENSOR
		_IS_FILAMENT_IN_EXTRUDER
		G91
		SELECT_TOOL VALUE={printer["gcode_macro SELECT_TOOL"].color_selected|int}
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-40 SPEED=10 SET_POSITION=0 SYNC=0
		G1 E-40 F600
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SYNC=1
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper MOVE=-60 SPEED=50 SET_POSITION=0 SYNC=0
		G1 E-60 F3000
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SYNC=1
		_MMU_MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
		UNSELECT_TOOL
		G90
		G92 E0
		G4 P1000
		_IS_FILAMENT_STUCK_IN_EXTRUDER
	{% endif %}

###############################################

